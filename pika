module drawNum(clk, enable, xCount, yCount, address, done);
//18x18
//num1 to num9
	input clk, enable;
	output 	reg [4:0]xCount;
	output 	reg [4:0]yCount;
	output reg [10:0]address;
	output reg done;
	
	initial begin
	xCount = 0;
	yCount = 0;
	address = 0;
	end	
	
	always @ (posedge clk)
	begin
	if (enable) begin
		if (xCount < 5'd17)
		         xCount <= xCount +1;
				if (yCount == 5'd17) done<=1;
		else if (xCount==5'd17) begin
			if (yCount<5'd17) begin
				xCount<=0;
				yCount<=yCount+1;
			end
		end
		address <= address+11'b1;
		end
	    else begin 
		done <= 0; 
		xCount = 0;
		yCount = 0;
		address = 0;
		end
	end
endmodule 

		 
module displaya(clk, board_top_plot, start_page, over_page, color, x,y, writeEn);
 input clk, board_top_plot,start_page, over_page;
 
 output reg [5:0]color;
 output reg [9:0]x;
 output reg [8:0]y;
 output reg writeEn;
 wire donebt,donebb;

 reg [9:0] x0bt, x0bb;
 reg [8:0] y0bt, y0bb;
 

 wire [9:0]xbtCount, xbbCount;
 wire [8:0]ybtCount,ybbCount;
 wire [15:0]btaddress, bbaddress;
 wire [5:0]btcolor, bbcolor;
 bgtopt ggg(btaddress, clk, btcolor);
 bgbott gg(bbaddress, clk, bbcolor);
 draw_board bt(clk, board_top_plot, xbtCount, ybtCount, btaddress, donebt);
 draw_board bb(clk, donebt, xbbCount, ybbCount, bbaddress, donebb);
 
 wire [9:0]xstCount, xsbCount;
 wire [8:0]ystCount,ysbCount;
 wire [15:0]staddress, sbaddress;
 wire [5:0]stcolor, sbcolor;
 starttop st(staddress, clk, stcolor);
 startbot sb(sbaddress, clk, sbcolor);
 draw_board bt(clk, start_page, xstCount, ystCount, staddress, donebts);//enable1?
 draw_board bb(clk, donebts, xsbCount, ysbCount, sbaddress, donebbs);
 
 wire [9:0]xwtCount, xwbCount;
 wire [8:0]ywtCount,ywbCount;
 wire [15:0]wtaddress, wbaddress;
 wire [5:0]wtcolor, wbcolor;
 starttop st(wtaddress, clk, wtcolor);
 startbot sb(wbaddress, clk, wbcolor);
 draw_board bt(clk, over_page, wstCount, wstCount, wtaddress, donebtw);//enable2?
 draw_board bb(clk, donebtw, wsbCount, wsbCount, wbaddress, donebbw);
 
 

 initial begin
 	x0bt<=0;
 	y0bt<=0;
 
 	x0bb<=0;
 	y0bb<=9'd120;
 end

 always @ (posedge clk) begin
 if (start_page) begin
   if(!donebts) begin
   x <= xstCount+x0bt;
   y <= ystCount+y0bt;
   color <= btcolor;
   writeEn <= 1'b1;
   end
   else begin
   x <= xsbCount+x0bb;
   y <= ysbCount+y0bb;
   color <= bbcolor;
   writeEn <= 1'b1;
   end
end

 if (board_top_plot) begin
  if(!donebt) begin
   x <= xbtCount+x0bt;
   y <= ybtCount+y0bt;
   color <= btcolor;
   writeEn <= 1'b1;
  
  end
  else begin
   x <= xbbCount+x0bb;
   y <= ybbCount+y0bb;
   color <= bbcolor;
   writeEn <= 1'b1;
  end
 end
 
 if (over_page) begin
  if(!donebtw) begin
   x <= xwtCount+x0bt;
   y <= ywtCount+y0bt;
   color <= wtcolor;
   writeEn <= 1'b1;
  
  end
  else begin
   x <= xwbCount+x0bb;
   y <= ywbCount+y0bb;
   color <= wbcolor;
   writeEn <= 1'b1;
  end
 end

 else
  writeEn <= 1'b0;
 end
 
endmodule

module display_num(clk,x0,y0,num_in,enable,isIncorrect,color, x,y, writeEn);
 input clk, enable,isIncorrect;
 input [3:0] num_in;
 input [9:0] x0;
 input [8:0] y0;
 output reg [5:0]color;
 output reg [9:0]x;
 output reg [8:0]y;
 output reg writeEn;
 
 wire [4:0] xCount1,xCount2,xCount3,xCount4,xCount5,xCount6,xCount7,xCount8,xCount9;
 wire [4:0] yCount1,yCount2,yCount3,yCount4,yCount5,yCount6,yCount7,yCount8,yCount9;
 wire [4:0] xCounti1,xCounti2,xCounti3,xCounti4,xCounti5,xCounti6,xCounti7,xCounti8,xCounti9;
 wire [4:0] yCounti1,yCounti2,yCounti3,yCounti4,yCounti5,yCounti6,yCounti7,yCounti8,yCounti9;
 wire [:0]  address1,address2,address3,address4,address5,address6,address7,address8,address9;
 wire [:0]  addressi1,addressi2,addressi3,addressi4,addressi5,addressi6,addressi7,addressi8,addressi9;
 wire [5:0] color1,color2,color3,color4,color5,color6,color7,color8,color9;
 wire [5:0] colori1,colori2,colori3,colori4,colori5,colori6,colori7,colori8,colori9;
 wire [8:0] done,donei;
 
 
 num1 n1(address1, clk, color1);
 num2 n2(address2, clk, color2);
 num3 n3(address3, clk, color3);
 num4 n4(address4, clk, color4);
 num5 n5(address5, clk, color5);
 num6 n6(address6, clk, color6);
 num7 n7(address7, clk, color7);
 num8 n8(address8, clk, color8);
 num9 n9(address9, clk, color9);
 
 drawNum n1d(clk, enable, xCount1, yCount1, address1, done[0]);
 drawNum n2d(clk, enable, xCount2, yCount2, address2, done[1]);
 drawNum n3d(clk, enable, xCount3, yCount3, address3, done[2]);
 drawNum n4d(clk, enable, xCount4, yCount4, address4, done[3]);
 drawNum n5d(clk, enable, xCount5, yCount5, address5, done[4]);
 drawNum n6d(clk, enable, xCount6, yCount6, address6, done[5)];
 drawNum n7d(clk, enable, xCount7, yCount7, address7, done[6]);
 drawNum n8d(clk, enable, xCount8, yCount8, address8, done[7]);
 drawNum n9d(clk, enable, xCount9, yCount9, address9, done[8]);
 
 incorrect1 ni1(addressi1, clk, colori1);
 incorrect2 ni2(addressi2, clk, colori2);
 incorrect3 ni3(addressi3, clk, colori3);
 incorrect4 ni4(addressi4, clk, colori4);
 incorrect5 ni5(addressi5, clk, colori5);
 incorrect6 ni6(addressi6, clk, colori6);
 incorrect7 ni7(addressi7, clk, colori7);
 incorrect8 ni8(addressi8, clk, colori8);
 incorrect9 ni9(addressi9, clk, colori9);
 
 drawNum n1d(clk, enable, xCounti1, yCounti1, addressi1, donei[0]);
 drawNum n2d(clk, enable, xCounti2, yCounti2, addressi2, donei[1]);
 drawNum n3d(clk, enable, xCounti3, yCounti3, addressi3, donei[2]);
 drawNum n4d(clk, enable, xCounti4, yCounti4, addressi4, donei[3]);
 drawNum n5d(clk, enable, xCounti5, yCounti5, addressi5, donei[4]);
 drawNum n6d(clk, enable, xCounti6, yCounti6, addressi6, donei[5)];
 drawNum n7d(clk, enable, xCounti7, yCounti7, addressi7, donei[6]);
 drawNum n8d(clk, enable, xCounti8, yCounti8, addressi8, donei[7]);
 drawNum n9d(clk, enable, xCounti9, yCounti9, addressi9, donei[8]);
 
 
 always@(posedge clk)
    case(num_in)
	4'd0:begin
	    if (enable) begin
            x <= xCount1+x0;
            y <= yCount1+y0;
            color <= color1;
            writeEn <= 1'b1; 
	    end
		 
		else if(isIncorrect) begin
		    x <= xCounti1+x0;
            y <= yCounti1+y0;
            color <= colori1;
            writeEn <= 1'b1; 
		end
		
		else
            writeEn <= 1'b0;
			
         end
	4'd1:begin
	     if (enable) begin
            x <= xCount2+x0;
            y <= yCount2+y0;
            color <= color2;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti2+x0;
            y <= yCounti2+y0;
            color <= colori2;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd2:begin
	     if (enable) begin
            x <= xCount3+x0;
            y <= yCount3+y0;
            color <= color3;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti3+x0;
            y <= yCounti3+y0;
            color <= colori3;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd3:begin
	     if (enable) begin
            x <= xCount4+x0;
            y <= yCount4+y0;
            color <= color4;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti4+x0;
            y <= yCounti4+y0;
            color <= colori4;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd4:begin
	     if (enable) begin
            x <= xCount5+x0;
            y <= yCount5+y0;
            color <= color5;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti5+x0;
            y <= yCounti5+y0;
            color <= colori5;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd5:begin
	     if (enable) begin
            x <= xCount6+x0;
            y <= yCount6+y0;
            color <= color6;
            writeEn <= 1'b1; 
	     end
		 
		 else if(isIncorrect) begin
		    x <= xCounti6+x0;
            y <= yCounti6+y0;
            color <= colori6;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd6:begin
	     if (enable) begin
            x <= xCount7+x0;
            y <= yCount7+y0;
            color <= color7;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti7+x0;
            y <= yCounti7+y0;
            color <= colori7;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd7:begin
	     if (enable) begin
            x <= xCount8+x0;
            y <= yCount8+y0;
            color <= color8;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti8+x0;
            y <= yCounti8+y0;
            color <= colori8;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	4'd8:begin
	     if (enable) begin
            x <= xCount9+x0;
            y <= yCount9+y0;
            color <= color9;
            writeEn <= 1'b1; 
	     end
		 else if(isIncorrect) begin
		    x <= xCounti9+x0;
            y <= yCounti9+y0;
            color <= colori9;
            writeEn <= 1'b1; 
		end
		 else
            writeEn <= 1'b0;
         end
	endcase
end

endmodule
	
 





